<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd	
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">

	<!-- 只搜索@Controller 标注的类 不搜索其他标注的类 -->
	<context:component-scan base-package="com.lettucetech.me2" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- controller层的属性和配置文件读入 ,多个用逗号隔开 <context:property-placeholder location="classpath:/config/others/config.properties" 
		/> -->

	<!-- 应用属性文件读入 -->
	<bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath:/config/others/config.properties</value>
				<value>classpath:/config/ibatis/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 用于持有applicationProperties,将properties转变为静态方法使用,PropertiesHolder.getProperty("somekey") -->
	<bean class="com.lettucetech.me2.common.utils.PropertiesHolder">
		<property name="properties" ref="applicationProperties" />
	</bean>

	<!-- PropertyPlaceholderConfigurer,用于spring ${placeholder}的解析 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="properties" ref="applicationProperties" />
	</bean>

	<!-- 激活 @Required @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 
		等标注 -->
	<context:annotation-config />


	<!-- 对某些静态资源，如css,图片等进行过滤 ,有引用 "/resources/**" 的路径引用转到工程的/resources/目录取资源 -->
	<!-- <mvc:resources mapping="/favicon.ico" location="/favicon.ico"/> -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/about/**" location="/about/" />
	<mvc:resources mapping="/case/**" location="/case/" />
	<mvc:resources mapping="/projects/**" location="/projects/" />
	<mvc:resources mapping="/services/**" location="/services/" />
	<mvc:resources mapping="/index.html" location="/index.html" />
	<mvc:resources mapping="/header.html" location="/header.html" />
	<mvc:resources mapping="/main.html" location="/main.html" />
	<mvc:resources mapping="/footer.html" location="/footer.html" />
	<mvc:annotation-driven />
	
		<!-- 权限验证 -->
	<!-- <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean id="loginInterceptor" class="com.lettucetech.me2.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors> -->
    
    <!-- ContentNegotiatingViewResolver视图解析器,利用他就可以配置多种返回值 -->
	 <bean  class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">   
	   <!-- 这里是否忽略掉accept header，默认就是false -->
	   <property name="ignoreAcceptHeader" value="true" />   
	   <!-- 如果所有的mediaType都没匹配上，就会使用defaultContentType -->
	   <property name="defaultContentType" value="text/html" />   
	   <property name="mediaTypes">    
	    <map>     
	     <entry key="json" value="application/json" />      
	    </map>    
	   </property>   
	  <!-- 默认使用MappingJacksonJsonView生成jsonview-->
	  <property name="defaultViews">    
	    <list>     
	     <bean  class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">        
	         <property  name="extractValueFromSingleKeyModel" value="true" />     
	      </bean>        
	     </list>     
	    </property>  
	  </bean>
	  
	<!-- jsp视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 解析request的编码 ，Default is ISO-8859-1 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 设置最大允许的大小(字节)。-1表示没有限制(默认) 1024*1024*10=10MB -->
		<property name="maxUploadSize" value="536870912" />
		<!--被允许的最大的内存的大小，Default is 10240 bytes -->
		<property name="maxInMemorySize" value="20480" />
		<!-- 一个类似懒加载的属性.可以定义该属性.让解析文件的时候再抛异常,然后Controller中定义异常处理的方法 -->
		<property name="resolveLazily" value="true" />
	</bean>

	<!-- controller异常统一处理 -->
	<bean class="com.lettucetech.me2.common.web.interseptor.ControllerJsonExceptionHandler"></bean>

	<import resource="classpath:/config/spring/springmvc-log.xml" />

</beans>
